import { AvatarAvailableCountResponse } from '../types/AvatarAvailableCountResponse';
import { MediaUnavailableRequest } from '../types/MediaUnavailableRequest';
import { NewSessionRequest } from '../types/NewSessionRequest';
import { NewSessionResponse } from '../types/NewSessionResponse';
export interface APIError {
    status: number;
    body: any;
}
export declare class API {
    callId: string;
    readonly authToken: string;
    private _callId;
    private xAuthToken;
    private readonly apiUrl;
    private readonly apiKey;
    private readonly loggedOutHandler;
    constructor(_apiUrl: string, _apiKey?: string, _loggedOutHandler?: () => void);
    startSession(data: NewSessionRequest): Promise<NewSessionResponse>;
    endCall(): Promise<void>;
    avatarStart(): Promise<void>;
    avatarWelcome(): Promise<void>;
    avatarAsk(text: string): Promise<void>;
    avatarStartRecording(): Promise<void>;
    avatarStopRecording(): Promise<void>;
    getAvailableAvatarCount(): Promise<AvatarAvailableCountResponse>;
    startSessionWithToken(data: NewSessionRequest): Promise<NewSessionResponse>;
    setAvatarDebug(enabled: boolean): Promise<any>;
    sendMediaUnavailable(data: MediaUnavailableRequest): Promise<any>;
    getEdgeNodeId(turnServerAddress: string): Promise<any>;
    getTimeZone(): string;
    private makeRequest;
    private getRequest;
    private postRequest;
    private putRequest;
}
